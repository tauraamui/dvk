fmt := import("fmt")
times := import("times")
metadata := import("metadata")

// LLF: Log level frequency
DVK_MODULE_CMD_ALIAS := "llf" // this is a required option "param"
DVK_SEEK_MIN := 0 // this is an optional param, default value is 0
DVK_SEEK_MAX := 100000 // this is an optional param, default value has not been decided yet

render_chart := func(data) {
    fmt.println(data)
}

// metadata object:
// md.time
// md.level
// md.full_log
// md.log_text

main := func(logs) {
    all_counts := []
    level_counts := {}

    last_time := undefined
    last_date_format := undefined
    for i := 0; i < len(logs); i++ {
        l := logs[i]
        lmd := metadata(l)

        if lmd.time == undefined || lmd.level == undefined { continue }

        time := times.parse(times.format_ansic, lmd.time)
        date_format := times.time_format(time, "02Jan2006")
        if last_date_format != undefined && last_date_format != date_format {
            level_counts.date = last_time
            all_counts = append(all_counts, level_counts)
            level_counts = {}
        }

        if i == len(logs)-1 {
            level_counts.date = time
            all_counts = append(all_counts, level_counts)
        }

        lc := level_counts[lmd.level]
        level_counts[lmd.level] = lc == undefined ? 1 : lc + 1

        last_time = time
        last_date_format = date_format
    }

    render_chart(all_counts)
}
