fmt := import("fmt")
times := import("times")
metadata := import("metadata")

// LLF: Log level frequency
DVK_MODULE_CMD_ALIAS := "llf" // this is a required option "param"
DVK_SEEK_MIN := 0 // this is an optional param, default value is 0
DVK_SEEK_MAX := 100000 // this is an optional param, default value has not been decided yet

calc_max_rep_chars := func(entries, key) {
    highest_count := 0
    for e in entries {
        ec := e.counts[key]
        if ec == undefined { continue }
        if ec > highest_count { highest_count = ec }
    }
    return highest_count
}

render_1Dbar_graph := func(data, log_level) {
    max := calc_max_rep_chars(data.entries, log_level)
    for e in data.entries {
        fmt.print(e.date, ": " + log_level + ": |")
        if max == 0 { continue }
        log_counts := e.counts[log_level]
        if log_counts != undefined {
            for i := 0; i < (float(log_counts) / float(max)) * 50; i++ {
                fmt.print("=")
            }
        }
        fmt.println("")
    }
}

map_to_array := func(m) {
    arr := []
    // map iteration
    for key, value in m {
        arr = append(arr, {key: key, value: value})  // builtin function 'append'
    }
    return arr
}

render_matrix_bar_graph := func(data) {
    if len(data.entries) == 0 { return }
    length_of_date := len(string(data.entries[0].date))

    header_padding := 3
    header_size := length_of_date+header_padding;
    line_prefix_padding := ""
    for i := 0; i < header_size; i++ { line_prefix_padding += " " }

    // acquire all different log levels
    all_levels_total_counts := {}
    for e in data.entries {
        for ll, lc in e.counts {
            cc := all_levels_total_counts[ll]
            all_levels_total_counts[ll] = cc == undefined ? lc : cc + lc
        }
    }

    all_levels_w_counts_arr := map_to_array(all_levels_total_counts)
    max_counts := len(all_levels_w_counts_arr)
    for i := 0; i < max_counts+1; i++ {
        fmt.print(line_prefix_padding)
        for j := 0; j < i; j++ {
            fmt.print("|")
            if i == max_counts { fmt.print("\\  "); continue }
            fmt.print("   ")
        }
        if i == max_counts { fmt.println(""); continue }
        kv := all_levels_w_counts_arr[i]
        fmt.printf("%s (%d)\n", kv.key, kv.value)
    }
    // column_index := 0
    // ind := 0
    // ind_target := len(all_levels_total_counts)
    // for ll, lc in all_levels_total_counts {
    //     fmt.print(line_prefix_padding)
    //     for i := 0; i < column_index; i++ {
    //         fmt.print("|")
    //         if ind == ind_target-1 { fmt.print("\\ "); continue }
    //         fmt.print("   ")
    //     }
    //     fmt.printf("%s (%d)\n", ll, lc)
    //     column_index++
    //     ind++
    // }

    // render top bar header
    for i := 0; i < header_size; i++ { fmt.print("-"); if i == header_size-1 { fmt.println("") } }
    // final data output render
    for e in data.entries {
        fmt.println(e.date)
    }
}

// metadata object:
// md.time
// md.level
// md.full_log
// md.log_text

main := func(logs, duration, log_level) {
    data := {
        num_months: 0,
        num_days: 0,
        entries: []
    }

    entry := { counts: {} }
    last_time := undefined
    last_date_day := undefined
    last_date_month := undefined
    for i := 0; i < len(logs); i++ {
        l := logs[i]
        lmd := metadata(l)

        if lmd.time == undefined || lmd.level == undefined { continue }

        time := times.parse(times.format_ansic, lmd.time)
        date_day := times.time_day(time)
        date_month := times.time_month(time)
        date_year := times.time_year(time)

        if date_month != last_date_month { data.num_months += 1 }
        if date_day != last_date_day { data.num_days += 1 }

        entry.day = date_day
        entry.month = date_month
        entry.year = date_year

        if duration == "month" && (last_date_month != undefined && last_date_month != date_month) || duration == "day" && (last_date_day != undefined && last_date_day != date_day) {
            entry.date = last_time
            data.entries = append(data.entries, entry)
            entry = { counts: {} }
        }

        if i == len(logs)-1 {
            entry.date = time
            data.entries = append(data.entries, entry)
        }

        lc := entry.counts[lmd.level]
        entry.counts[lmd.level] = lc == undefined ? 1 : lc + 1

        last_time = time
        last_date_day = date_day
        last_date_month = date_month
    }

    render_matrix_bar_graph(data)
}
