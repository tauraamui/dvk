fmt := import("fmt")
times := import("times")
text := import("text")

DVK_MODULE_CMD_ALIAS := "tsq" // this is a required option "param"
DVK_SEEK_MIN := 0 // this is an optional param, default value is 0
DVK_SEEK_MAX := 100000 // this is an optional param, default value has not been decided yet
DVK_DEFAULT_LOG_TIME_FORMAT := "ansic"
DVK_OPT_LOG_TIME_FORMAT := DVK_DEFAULT_LOG_TIME_FORMAT
DVK_OPT_QUERY_TIME_FORMAT := "2006"
DVK_OPT_LOG_LEVEL := "*"
DVK_OPT_CONTAINS_TXT := "*"

time_formats := {
    "ansic": times.format_ansic,             // "Mon Jan _2 15:04:05 2006"
    "unix": times.format_unix_date,          // "Mon Jan _2 15:04:05 MST 2006"
    "ruby": times.format_ruby_date,          // "Mon Jan 02 15:04:05 -0700 2006"
    "rfc822": times.format_rfc822,           // "02 Jan 06 15:04 MST"
    "rfc822z": times.format_rfc822z,         // "02 Jan 06 15:04 -0700"
    "rfc850": times.format_rfc850,           // "Monday, 02-Jan-06 15:04:05 MST"
    "rfc1123": times.format_rfc1123,         // "Mon, 02 Jan 2006 15:04:05 MST"
    "rfc1123z": times.format_rfc1123z,       // "Mon, 02 Jan 2006 15:04:05 -0700"
    "rfc3339": times.format_rfc3339,         // "2006-01-02T15:04:05Z07:00"
    "rfc3339n": times.format_rfc3339_nano,   // "2006-01-02T15:04:05.999999999Z07:00"
    "kitchen": times.format_kitchen,         // "3:04PM"
    "stamp": times.format_stamp,             // "Jan _2 15:04:05"
    "stampmilli": times.format_stamp_milli,  // "Jan _2 15:04:05.000"
    "stampmicro": times.format_stamp_micro,  // "Jan _2 15:04:05.000000"
    "stampn": times.format_stamp_nano        // "Jan _2 15:04:05.000000000"
}

regexp_within_braces := `\[[^]]*\]` // matches all characters between '[' ']'

strip_meta_data := func(log_line) {
    meta_data := { time: undefined, level: undefined, full_log: log_line, log_text: undefined }

    matches := text.re_find(regexp_within_braces, log_line, 2)
    if matches != undefined {
        first_match_start_index := undefined
        first_match_end_index := undefined
        if len(matches) >= 1 {
            if m := matches[0]; len(m) >= 1 {
                m = m[0]
                first_match_start_index = m.begin
                first_match_end_index = m.end
                meta_data.time = text.trim_suffix(text.trim_prefix(m.text, "["), "]")
            }
        }

        second_match_start_index := undefined
        second_match_end_index := undefined
        if len(matches) >= 2 {
            if m := matches[1]; len(m) >= 1 {
                m = m[0]
                second_match_start_index = m.begin
                second_match_end_index = m.end
                meta_data.level = text.trim_suffix(text.trim_prefix(m.text, "["), "]")
            }
        }


        if first_match_start_index != undefined && first_match_end_index != undefined {
            // TODO(tauraamui): Re-think log content selecting
            // this is too destructive and still assumes that the matches
            // proceed the remaining log line's content, which is not certain
            log_line = log_line[first_match_start_index:][first_match_end_index:]
            if second_match_start_index != undefined && second_match_end_index != undefined {
                second_match_start_index = second_match_start_index - first_match_end_index
                second_match_end_index = second_match_end_index - first_match_end_index
            }
        }

        if second_match_start_index != undefined && second_match_end_index != undefined {
            log_line = log_line[second_match_start_index:][second_match_end_index:]
        }

        meta_data.log_text = log_line
    }

    return meta_data
}

build_query := func(start_date, end_date, log_level) {
    optional_log_time_format := time_formats[DVK_OPT_LOG_TIME_FORMAT]
    query := {
        log_level: log_level,
        log_time_format: optional_log_time_format != undefined ? optional_log_time_format : DVK_DEFAULT_LOG_TIME_FORMAT,
        start_date: start_date != "*" ? times.parse(DVK_OPT_QUERY_TIME_FORMAT, start_date) : undefined,
        end_date: end_date != "*" ? times.parse(DVK_OPT_QUERY_TIME_FORMAT, end_date) : undefined
    }

    query.has_time_filter = query.start_date != undefined && query.end_date != undefined
    query.has_log_level_filter = query.log_level != undefined

    return query
}

main := func(logs, start_date, end_date) {
    fmt.println("Data Visualisation Kit - Time Series Query")

    q := build_query(start_date, end_date, DVK_OPT_LOG_LEVEL)

    for l in logs {
        if q.has_time_filter || q.has_log_level_filter {
            md := strip_meta_data(l)

            if q.has_time_filter {
                last_found_time := undefined
                last_found_time = md.time == undefined ? last_found_time : md.time

                if md.time == undefined {
                    continue
                }

                log_time := times.parse(q.log_time_format, md.time)
                if !(times.after(log_time, q.start_date) && times.before(log_time, q.end_date)) {
                    continue
                }
            }

            if q.has_log_level_filter {
                last_found_level := undefined
                last_found_level = md.level == undefined ? last_found_level : md.level

                if q.log_level != md.level {
                    continue
                }
            }
        }

        fmt.println(l)
    }
}
